set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin '907th/vim-auto-save'
Plugin 'AndrewRadev/linediff.vim'
Plugin 'SirVer/ultisnips'
Plugin 'Valloric/YouCompleteMe'
Plugin 'altercation/vim-colors-solarized'
Plugin 'easymotion/vim-easymotion'
Plugin 'elzr/vim-json'
Plugin 'gcmt/wildfire.vim'
Plugin 'gmarik/Vundle.vim'
Plugin 'godlygeek/tabular'
Plugin 'haya14busa/incsearch-easymotion.vim'
Plugin 'haya14busa/incsearch-fuzzy.vim'
Plugin 'haya14busa/incsearch.vim'
Plugin 'honza/vim-snippets'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plugin 'junegunn/fzf.vim'
Plugin 'junegunn/limelight.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'majutsushi/tagbar' " sudo apt-get install ctags
Plugin 'mkitt/tabline.vim'
Plugin 'nvie/vim-flake8'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'simnalamburt/vim-mundo'
Plugin 'tmux-plugins/vim-tmux'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-surround'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
call vundle#end()

set nocompatible
filetype plugin indent on
filetype off
if has("syntax")
  syntax on
endif
set undodir=$HOME/.vim/undos
set undofile
set directory=$HOME/.vim/swap
set noswapfile
set backupdir=$HOME/.vim/backups
set backupskip=/tmp/*,/private/tmp/* " http://vim.wikia.com/wiki/Editing_crontab
set backup
set linespace=0
set splitbelow
set splitright
set tabstop=4
set expandtab
set shiftwidth=4
set visualbell
set ttyfast
set laststatus=2
set hlsearch
set ignorecase
set smartcase
set foldmethod=indent
set foldlevel=99
set encoding=utf-8
set clipboard=unnamedplus
set backspace=indent,eol,start
set number
set shortmess=atI
set t_Co=256

" searches use normal regexes
nnoremap / /\v
vnoremap / /\v

"autocmd BufEnter * silent! lcd %:p:h
autocmd VimEnter * NERDTree
autocmd VimEnter * wincmd w
autocmd BufEnter * set mouse=
autocmd FileType sh,yaml,json,python setlocal ts=2 sts=2 sw=2 expandtab

let mapleader=' '

let g:solarized_termtrans=1
let g:solarized_termcolors=256
let g:solarized_visibility='high'
let g:solarized_contrast='high'
colorscheme solarized
set background=dark

let g:airline_powerline_fonts=1
let g:airline_solarized_bg='dark'
let g:airline_left_sep=''
let g:airline_right_sep=''

let python_highlight_all=1

let NERDTreeMinimalUI=1
let NERDTreeDirArrows=1
let NERDTreeAutoDeleteBuffer=1
let g:NERDTreeHijackNetrw=1
let NERDTreeIgnore=['\.pyc$', '\.classyc$', '__init__.py', '__pycache__']
highlight NERDTreeOpenable ctermfg=1
au VimEnter NERD_tree_1 enew | execute 'NERDTree '.argv()[0]

let g:nerdtree_tabs_open_on_console_startup=1
let g:nerdtree_tabs_no_startup_for_diff=0
let g:nerdtree_tabs_autoclose=0

let g:ctrlp_cmd='CtrlPBuffer'

let g:wildfire_objects=["iW", "i'", 'i"', "i)", "i]", "i}", "ip", "it"]

let g:auto_save=1
let g:auto_save_in_insert_mode=0
let g:auto_save_silent=1

let g:mundo_right=1
let g:mundo_close_on_revert=1

let g:vim_json_syntax_conceal=2

let g:UltiSnipsExpandTrigger='<tab>'
let g:UltiSnipsJumpForwardTrigger='<c-tab>'
let g:UltiSnipsJumpBackwardTrigger='<s-tab>'

let g:ycm_collect_identifiers_from_tags_files=1
let g:ycm_use_ultisnips_completer=1
let g:ycm_seed_identifiers_with_syntax=1
let g:ycm_complete_in_comments=1
let g:ycm_complete_in_strings=1
let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_collect_identifiers_from_comments_and_strings=1
let g:ycm_key_list_select_completion=['<C-j>']
let g:ycm_key_list_previous_completion=['<C-k>']

let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240

" move to char
map  <leader>f <Plug>(easymotion-bd-f)
" move to line
map <leader>L <Plug>(easymotion-bd-jk)
" move to word
map  <leader>w <Plug>(easymotion-bd-w)
map <C-b> :YcmCompleter GoTo<CR>

" fzf
map <leader>b :Buffers<CR>
map <leader>o :Files<CR>
map <leader>c :Commands<CR>

nmap <leader>a <Plug>(wildfire-quick-select)

nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
nnoremap H ^
nnoremap L $

nnoremap <leader>1 1gt<CR>
nnoremap <leader>2 2gt<CR>
nnoremap <leader>3 3gt<CR>
nnoremap <leader>tl :tabnext<CR>
nnoremap <leader>th :tabprevious<CR>
nnoremap <leader>tn :tabnew<cr>
nnoremap <leader>to :tabonly<cr>
nnoremap <leader>tc :tabclose<cr>
nnoremap <leader>tm :tabmove

nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprev<CR>

nnoremap <F8> :TagbarToggle<CR>
nnoremap <C-N> :MundoToggle<CR>
nnoremap <leader>r :NERDTreeFind<CR>
nnoremap <silent> <C-T> :NERDTreeToggle<CR>
nnoremap <silent><expr> <leader>/ incsearch#go(<SID>config_easyfuzzymotion())

nnoremap <leader>q :q<CR>
nnoremap <leader>Q :qa<CR>
nnoremap <leader>l :set list!<CR>
nnoremap <BS> :nohlsearch<CR>

inoremap <Up> <Nop>
inoremap <Down> <Nop>
inoremap <Left> <Nop>
inoremap <Right> <Nop>
"inoremap <BS> <Nop>
inoremap jj <ESC>
inoremap <S-Tab> <C-d>

vnoremap < <gv
vnoremap > >gv

cnoremap <C-H> <Left>
cnoremap <C-L> <Right>

" fuzzy-search with EasyMotion
function! s:config_easyfuzzymotion(...) abort
  return extend(copy({
  \   'converters': [incsearch#config#fuzzyword#converter()],
  \   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
  \   'keymap': {"\<CR>": '<Over>(easymotion)'},
  \   'is_expr': 0,
  \   'is_stay': 1
  \ }), get(a:, 1, {}))
endfunction
