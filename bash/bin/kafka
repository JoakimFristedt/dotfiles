#!/usr/bin/env bash

#set -x

command -v kafkacat > /dev/null 2>&1 || {
  echo >&2 "kafka: I require kafkacat, but it's not installed. Aborting.";
  exit 1;
}

command -v jq > /dev/null 2>&1 || {
  echo >&2 "kafka: I require jq, but it's not installed. Aborting.";
  exit 1;
}

command -v fzf > /dev/null 2>&1 || {
  echo >&2 "kafka: I require fzf, but it's not installed. Aborting.";
  exit 1;
}

usage() {
  echo "Usage:"
  echo "  kafka [command] [args]"
  echo ""
  echo "Commands:"
  echo ""
  echo "  -L, list                                 List topics"
  echo "  -C, consume                              Consume topic"
  echo "  -P, produce                              Produce to topic"
  echo "  -PP, produce-to-all-partitions           Produce msg to all partitions on topic (NOTE: wrap msg with double qoutes in single qoutes)"
  echo "  -LP                                      List amount of partitions for topic"
  echo ""
  echo "Arguments:"
  echo ""
  echo "  -t, --topic"
  echo "  -p, --partition"
  echo "  -o, --offset"
  echo "  -m, --message     Message to produce (only applicable on -P, -PP)"
  echo ""
  echo ""
  echo "Example:"
  echo ""
  echo "  Consume topic:"
  echo "  kafka -t test -C"
  echo "  "
  echo "  Consume topic on partition"
  echo "  kafka -t test -C -p 0"
  echo "  "
  echo "  Produce message to topic:"
  echo "  kafka -t test -P"
  echo "  "
  echo "  Produce message to all partitions on topic:"
  echo "    kafka -t test -PP -m '{"name":"joakim"}'"
  echo ""
  echo "Security:"
  echo ""
  echo "  Script will look for env file '.kafka_config' in currect dir. It should contain values for:"
  echo "    KAFKA_BROKER, KAFKA_USERNAME, KAFKA_PASSWORD"
  echo ""
}

if [[ ${1} == "--help" ]]; then
  usage
  exit 0
fi

if [ -f .kafka_config ]; then
  source .kafka_config
else
  KAFKA_BROKER="localhost:9092"
  KAFKA_USERNAME=""
  KAFKA_PASSWORD=""
fi

if [ -z $KAFKA_USERNAME ]; then
  KAFKA_SECURITY_OPTS=""
else
  KAFKA_SECURITY_OPTS="-X security.protocol=SASL_SSL \
    -X sasl.username=$KAFKA_USERNAME \
    -X sasl.password=$KAFKA_PASSWORD \
    -X sasl.mechanisms=PLAIN"
fi

function _get_topics_metadata() {
  CMD="kafkacat \
    -L \
    $KAFKA_SECURITY_OPTS \
    -b $KAFKA_BROKER"
  $CMD
}

function _get_topics() {
  _get_topics_metadata | grep "topic\s\"" | cut -d "\"" -f 2
}

function _set_topic() {
  if [ -z $TOPIC ]; then
    TOPIC=$(_get_topics | fzf --height 10%)
  fi
}

function _consume_topic() {
  _set_topic
  CMD="kafkacat \
    -C \
    $KAFKA_SECURITY_OPTS \
    -b $KAFKA_BROKER \
    -t $TOPIC"
  if [ ! -z $PARTITION ]; then
    CMD+=" -p $PARTITION"
  fi
  if [ ! -z $OFFSET ]; then
    CMD+=" -o $OFFSET"
  fi
  $CMD
}

function _produce_to_topic() {
  _set_topic
  kafkacat \
    -P \
    $KAFKA_SECURITY_OPTS \
    -b $KAFKA_BROKER \
    -t $TOPIC
}

function _produce_msg_to_all_partitions() {
  _set_topic
  if [ -z "$MSG" ]; then
    echo "Missing mandatory [-m,--message] flag"
    exit 1
  fi

  partitions=$(_get_partitions_for_topic)
  echo Topic $TOPIC has $partitions partitions

  for ((i=0;i<=$partitions;i++)); do
      echo "Writing msg to partition: $i"
      echo $MSG | kafkacat \
        -P \
        $KAFKA_SECURITY_OPTS \
        -b $KAFKA_BROKER \
        -t $TOPIC \
        -p $i
        $1
  done
}

function _get_partitions_for_topic() {
  _set_topic
  kafkacat \
    -L \
    $KAFKA_SECURITY_OPTS \
    -b $KAFKA_BROKER \
    -t $TOPIC \
    -J | jq -r .topics[0].partitions[].partition | tail -n 1
}

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -L | list)
    shift
    ARG=_get_topics
    ;;
    -C | consume)
    shift
    ARG=_consume_topic
    ;;
    -P | produce)
    shift
    ARG=_produce_to_topic
    ;;
    -PP | produce-to-all)
    shift
    ARG=_produce_msg_to_all_partitions
    ;;
    -LP | list-partitions-for-topic)
    shift
    ARG=_get_partitions_for_topic
    ;;
    -M | metadata)
    shift
    ARG=_get_topics_metadata
    ;;
    -t | --topic)
    shift
    TOPIC="$1"
    shift
    ;;
    -p | --partition)
    shift
    PARTITION="$1"
    shift
    ;;
    -o | --offset)
    shift
    OFFSET="$1"
    shift
    ;;
    -m | --message)
    shift
    MSG=$1
    shift
    ;;
    -v | --verbose)
    echo "Topic: " $TOPIC
    echo "Broker: " $KAFKA_BROKER
    shift
    ;;
    *)
    POSITIONAL+=("$1")
    shift
    ;;
esac
done

$ARG
