#!/usr/bin/env bash

#set -x

command -v kubectl > /dev/null 2>&1 || {
  echo >&2 "kubectl: I require kafkacat, but it's not installed. Aborting.";
  exit 1;
}

command -v jq > /dev/null 2>&1 || {
  echo >&2 "jq: I require jq, but it's not installed. Aborting.";
  exit 1;
}

command -v fzf > /dev/null 2>&1 || {
  echo >&2 "fzf: I require fzf, but it's not installed. Aborting.";
  exit 1;
}

command -v awk > /dev/null 2>&1 || {
  echo >&2 "awk: I require awk, but it's not installed. Aborting.";
  exit 1;
}

command -v kafka > /dev/null 2>&1 || {
  echo >&2 "kafka: I require kafka, but it's not installed. Aborting.";
  exit 1;
}

usage() {
  echo "Usage:"
  echo "  dc [commands...] "
  echo ""
  echo "Commands:"
  echo ""
  echo ""
  echo "  Kubernetes/FlowGraph:"
  echo ""
  echo "    k8s-pf, k8s-port-forward             Port forward k8s resource"
  echo "    k8s-logs                             Tail k8s resources logs"
  echo "    k8s-rm                               Remove k8s pods + deployment + service"
  echo "    k8s-rm-all                           Remove all k8s resource (pods + deployments + service + config)"
  echo "    k8s-scale                            Scale deployment"
  echo ""
  echo "  Resources:"
  echo "    tm, taskmanager                      Perform commands on flink taskmanagers"
  echo "    jm, jobmanager                       Perform commands on flink jobmangers"
  echo "    grafana                              Perform commands on grafana instance"
  echo "    prometheus                           Perform commands on grafana instance"
  echo ""
  echo ""
  echo "  Kafka/FlowGraph:"
  echo ""
  echo "    kafka-send-load-complete-message     Send load complete message to topic"
  echo "    kafka-send-replay-message            Send replay message to topic"
  echo "    flowgraph-create-savepoint           "
  echo "    flowgraph-get-savepoint-status       "
  echo ""
  echo ""
  echo "  Bitbucket:"
  echo ""
  echo "    bitbucket-open-pr                    Open pull request in browser"
  echo ""
  echo ""
  echo "  Jira:"
  echo ""
  echo "    jira-open-ticket                     Open Jira ticket in browser"
  echo "    jira-create-ticket                   Create Jira ticket"
  echo "    jira-assign-ticket                   Assign ticket to you"
  echo ""
  echo ""
  echo "  Bamboo:"
  echo ""
  echo "    bamboo-open-plan                     Open bamboo build plan in browser"
  echo "    bamboo-open-plan-logs                Open bamboo build plan result logs in browser"
  echo "    bamboo-build-fg                      Build FlowGraph"
  echo "    bamboo-release-fg                    Create release of FlowGraph"
  echo "    bamboo-deploy-fg                     Deploy FlowGraph to k8s environment"
  echo ""
  echo ""
  echo "Arguments:"
  echo ""
  echo "    -h, --help                           Show script usage"
  echo "    -f, --force                          Reset cache data for command"
  echo "    --flowgraph                          Choose FlowGraph to perform operations on"
  echo "    --plan-key                           Choose bamboo plan key to perform operations on"
  echo "    --build-result-key                   Choose build result to perform operations on"
  echo "    --release-name                       Choose name of release"
  echo "    --environment                        Choose bamboo environment to perform operations in"
  echo ""
  echo ""
  echo "Examples:"
  echo ""
  echo "    K8s operations:"
  echo ""
  echo "        dc k8s-pf jm"
  echo "        dc k8s-logs jm"
  echo "        dc k8s-rm"
  echo "        dc k8s-rm-all"
  echo "        dc k8s-scale"
  echo ""
  echo "    Kafka/FlowGraph:"
  echo ""
  echo "        dc kafka-send-load-complete-message"
  echo "        dc kafka-send-replay-message"
  echo "        dc flowgraph-create-savepoint"
  echo "        dc flowgraph-get-savepoint-status"
  echo ""
  echo "    Jira/Bitbucket/Bamboo:"
  echo ""
  echo "        dc jira-open-ticket"
  echo "        dc bitbucket-open-pr"
  echo "        dc bamboo-open-plan"
  echo ""
  echo "    Build, release and deploy FlowGraph:"
  echo ""
  echo "        Build FG cap-marital-features on master branch:"
  echo ""
  echo "            dc bamboo-build-fg --flowgraph cap-martital-features"
  echo ""
  echo "        Build FG cap-marital-features for a specific bamboo plan branch:"
  echo ""
  echo "            dc bamboo-build-fg --flowgraph cap-martital-features --plan-key DPDC-ODDCFG54"
  echo ""
  echo "        Create bamboo release:"
  echo ""
  echo "            dc bamboo-release-fg --build-result-key DPDC-ODDCFG54-6 --release-name release1"
  echo ""
  echo "        Deploy bamboo release:"
  echo ""
  echo "            dc bamboo-deploy-fg"
  echo ""
  echo ""

}

CACHE_BASE_DIR="/tmp/dc"
ATLASSIAN_CONF_FILE="$HOME/.atlassian_config"

KUBETAIL_OPTS="--since 10m"

function k8_port_forward() {
  if [ "$SERVICE" = "jm" ]; then
    __k8_port_forward_job_manager
  fi
  if [ "$SERVICE" = "grafana" ]; then
    __k8_port_forward_grafana
  fi
  if [ "$SERVICE" = "prometheus" ]; then
    __k8_port_forward_prometheus
  fi
}

function k8_tail_logs() {
  if [ "$SERVICE" = "jm" ]; then
    __k8_tail_flink_reousrce jobmanager
  fi
  if [ "$SERVICE" = "tm" ]; then
    __k8_tail_flink_reousrce taskmanager
  fi
  if [ "$SERVICE" = "grafana" ]; then
    kubetail $KUBETAIL_OPTS -l app=odp-dc-grafana
  fi
}

function k8_remove_flowgraph() {
  APP=$(__get_k8_flink_app_labels_v2 jobmanager)
  QUESTION="Are you sure you want to remove pods+deployment+service for '$APP' in $(__k8_get_current_namespace)?"
  __interactive_yes_no_dialog "$QUESTION"
  kubectl delete deployment,service,pods -l app=$APP
}

function k8_remove_all_flowgraph_resources() {
  APP=$(__get_k8_flink_app_labels_v2 jobmanager)
  currentNamespace=$(__k8_get_current_namespace)
  QUESTION="Are you sure you want to remove all resoruces for '$APP' in '$currentNamespace'?"
  __interactive_yes_no_dialog "$QUESTION"

  if [[ $currentNamespace =~ "prod" ]]; then
    SAFETY_QUESTION="Are you really sure? This will remove entire flink job state and can't be recovered?"
    __interactive_yes_no_dialog "$SAFETY_QUESTION"
  fi

  kubectl delete deployment,cm,service,pods -l app=$APP
}

function k8_scale_deployment() {
  APP=$(__get_k8_flink_app_labels_v2 jobmanager)
  currentNamespace=$(__k8_get_current_namespace)
  taskmanagerDeploymentName="$APP-taskmanager"

  QUESTION="How many replicas of '$taskmanagerDeploymentName' in '$currentNamespace' do you want?"

  __interactive_input_dialog "$QUESTION"

  REPLICAS=$ANSWER

  re='^[0-9]$'
  if ! [[ $REPLICAS =~ $re ]] ; then
    echo "Answer must be [0-9]"
    exit 1
  fi

  kubectl scale deployment $taskmanagerDeploymentName --replicas=$REPLICAS
}

function kafka_send_load_complete_command_msg() {
  LOAD_COMPLETE_MSG='{"identifier":"60c34e0c-ee30-47be-b2a1-cd979d0fc748","data":{"fullLoadComplete":{"@class":"com.bisnode.odp.dc.domain.message.command.LoadStatusCommandMessage","name":"fullLoadComplete","sourceDatasetReferences":["Not applicable"],"createdTimestamp":"2021-06-02T04:31:16.416000Z","date":"2021-06-02T04:31:16.416000Z","type":"fullLoad","status":"completed"}},"flowGraphName":null,"flowGraphVersion":null,"createdTimestamp":"2021-06-02T04:31:16.416000Z"}'
  __send_msg_to_kafka "$LOAD_COMPLETE_MSG"
}

function kafka_send_replay_command_msg() {
  REPLAY_CMD_MSG='{"identifier":"c2939441-db2b-4be2-a529-1161c8d256d1","data":{"replayMessage":{"@class":"com.bisnode.odp.dc.domain.message.command.ReplayStreamCommandMessage","name":"replayMessage","sourceDatasetReferences":["Not applicable"],"createdTimestamp":"2021-06-02T04:31:16.416000Z","date":"2021-06-02T04:31:16.416000Z"}},"flowGraphName":null,"flowGraphVersion":null,"createdTimestamp":"2021-06-02T04:31:16.416000Z"}'
  __send_msg_to_kafka "$REPLAY_CMD_MSG"
}

function flowgraph_create_savepoint() {
  __variable_is_set $JOB_ID "Missing required --job-id"

  requestId=$(curl \
    -X POST \
    --silent \
    -d '{"target-directory": "s3://bisnode-odp-dc-runtime-dev/flink/savepoints", "cancel-job": false}' \
    http://localhost:8081/jobs/$JOB_ID/savepoints | jq -r '."request-id"')

  echo "dc flowgraph-get-savepoint-status --job-id $JOB_ID --request-id $requestId"
}

function flowgraph_get_savepoint_status() {
  __variable_is_set $JOB_ID "Missing required --job-id"
  __variable_is_set $REQUEST_ID "Missing required --request-id"

  curl http://localhost:8081/jobs/$JOB_ID/savepoints/$REQUEST_ID
}

function jira_list_tickets_in_current_sprint() {
  JIRA_BROWSE_URI="$ATLASSIAN_JIRA_HOST/browse"
  __get_jira_tickets_in_current_sprint \
    | fzf \
    | xdg-open $JIRA_BROWSE_URI/$(awk -F ' \| ' '{print $1}') > /dev/null 2>&1
}

function bitbucket_list_pull_requests() {
  choosenPr=$(__get_open_pull_requests \
    | jq -r '. | "\(.title) | \(.author) | \(.link)"' \
    | fzf \
    | awk -F ' \| ' '{print $3}')
  __variable_is_set "$choosenPr" "You must pick a PR to open"

  xdg-open $choosenPr > /dev/null 2>&1
}

function bamboo_open_plan() {
  __get_bamboo_plans \
    | fzf \
    | xdg-open $ATLASSIAN_BAMBOO_HOST/browse/$(awk -F ' \| ' '{print $1}') > /dev/null 2>&1
}

function bamboo_download_latest_build_logs() {
  res=$(__get_bamboo_plans \
    | fzf \
    | curl --silent -H "Authorization: Bearer $ATLASSIAN_BAMBOO_AUTH_TOKEN" "$ATLASSIAN_BAMBOO_HOST/rest/api/1.0/result/$(awk -F ' \| ' '{print $1}').json" \
    | jq -r '.results.result[0] | "\(.plan.key) | \(.number) | \(.state) | \(.key)"')
  planKey=$(echo $res | awk -F ' \| ' '{print $1}')
  resNumber=$(echo $res | awk -F ' \| ' '{print $2}')

  __bamboo_download_plan_log $planKey $resNumber
}

function bamboo_run_flowgraph_runner() {
  flowgraph_runner_master_plan_key="DPDC-ODDCFG"
  __variable_is_set "$FLOWGRAPH" "Missing required '--flowgraph' param"

  if [ -z $BAMBOO_PLAN_KEY ]; then
    __interactive_yes_no_dialog "Are you sure you want to use master branch?"
    planKey="$flowgraph_runner_master_plan_key"
  else
    planKey="$BAMBOO_PLAN_KEY"
  fi
  res=$(__bamboo_run_build_plan $planKey "bamboo.variable.TARGET_FLOWGRAPH=$FLOWGRAPH")
  planKey=$(echo $res | jq -r .planKey)
  buildNumber=$(echo $res | jq -r .buildNumber)
  buildResultKey=$(echo $res | jq -r .buildResultKey)

  echo ""
  echo "Browse: $ATLASSIAN_BAMBOO_HOST/browse/$buildResultKey"
  echo "Logs: $(__bamboo_get_download_logs_uri $planKey $buildNumber)"
  echo ""
  echo "Build result key: $buildResultKey"
  echo ""
  echo "Create release with: "
  echo ""
  echo "dc bamboo-release-fg --build-result-key $buildResultKey --release-name $FLOWGRAPH-1"
  echo ""
}

function __bamboo_run_build_plan() {
  if [ ! -z $2 ]; then
    endpoint="$1.json?$2"
  else
    endpoint="$1.json"
  fi
  curl \
    --silent \
    -XPOST \
    -H "Authorization: Bearer $ATLASSIAN_BAMBOO_AUTH_TOKEN" \
    "$ATLASSIAN_BAMBOO_HOST/rest/api/1.0/queue/$endpoint"
}

function __bamboo_download_plan_log() {
  planKey="$1"
  resNumber="$2"

  curl \
    --silent \
    --user "$ATLASSIAN_USERNAME:$ATLASSIAN_PASSWORD" \
    $(__bamboo_get_download_logs_uri $planKey $resNumber)
}

function __bamboo_get_download_logs_uri() {
  planKey="$1"
  resNumber="$2"

  echo "$ATLASSIAN_BAMBOO_HOST/download/$planKey-JOB1/build_logs/$planKey-JOB1-$resNumber.log"
}

function __bamboo_create_release() {
  __variable_is_set $BAMBOO_DEPLOY_RESULT_KEY "Param --build-result-key is missing"
  __variable_is_set $BAMBOO_RELEASE_NAME "Param --release-name is missing"

  plan="$BAMBOO_DEPLOY_RESULT_KEY"
  projectKey="2364243970" # TODO - This is odp-dc-flowgraphs-runner project
  res=$(curl \
    --silent \
    -XPOST \
    -H "Authorization: Bearer $ATLASSIAN_BAMBOO_AUTH_TOKEN" \
    -H "Content-type: application/json" \
    -d '{"planResultKey":"'$plan'","name":"'$BAMBOO_RELEASE_NAME'"}' \
    "$ATLASSIAN_BAMBOO_HOST/rest/api/latest/deploy/project/$projectKey/version")

  echo "Deploy FG with: dc bamboo-deploy-fg"
}

function __bamboo_get_deployment_environments() {
  cache="$CACHE_BASE_DIR/bamboo-deployment-environments"
  if [[ ! -s $cache ]]; then
    curl \
      --silent \
      -H 'Accepts: application/json' \
      -H "Authorization: Bearer $ATLASSIAN_BAMBOO_AUTH_TOKEN" \
      "$ATLASSIAN_BAMBOO_HOST/rest/api/latest/deploy/project/2364243970" \
      | jq '.environments[] | {id: .id, name: .name}' > $cache
  fi
  cat $cache
}

function __bamboo_get_flowgraph_runner_releases() {
  cache="$CACHE_BASE_DIR/bamboo-flowgraph-runner-releases"
  if [[ ! -s $cache ]]; then
    curl \
      --silent \
      -H 'Accepts: application/json' \
      -H "Authorization: Bearer $ATLASSIAN_BAMBOO_AUTH_TOKEN" \
      "$ATLASSIAN_BAMBOO_HOST/rest/api/latest/deploy/project/2364243970/versions" \
      | jq '.versions[] | {id: .id, name: .name}' > $cache
  fi
  cat $cache
}

function __bamboo_deploy_flowgraph() {
  versionId=$(__bamboo_choose_flowgraph_runner_realease_version)
  __variable_is_set $versionId "You must pick a version"

  environmentId=$(__bamboo_choose_environment)
  __variable_is_set $environmentId "You must pick a environment"
  res=$(curl \
    --silent \
    -XPOST \
    -H 'Accepts: application/json' \
    -H "Authorization: Bearer $ATLASSIAN_BAMBOO_AUTH_TOKEN" \
    "$ATLASSIAN_BAMBOO_HOST/rest/api/latest/queue/deployment/?environmentId=$environmentId&versionId=$versionId")

  statusLink=$(echo $res | jq -r .link.href)

  sleep 2

  statusRes=$(curl \
    --silent \
    -H 'Accepts: application/json' \
    -H "Authorization: Bearer $ATLASSIAN_BAMBOO_AUTH_TOKEN" \
    "$statusLink")

  echo $statusRes | jq '. | {name: .deploymentVersion.name, creator: .deploymentVersion.creatorUserName, state: .deploymentState, lifeCycleState: .lifeCycleState}'
}

function __bamboo_choose_environment() {
  if [ -z $ENVIRONMENT ]; then
    ENVIRONMENT_ID=$(__bamboo_get_deployment_environments \
      | jq -r '. | "\(.id) | \(.name)"' \
      | fzf \
      | awk -F ' \| ' '{print $1}')
  else
    ENVIRONMENT_ID=$(__bamboo_get_deployment_environments \
      | jq -r --arg ENVIRONMENT "$ENVIRONMENT" '. | select(.name==$ENVIRONMENT) | .id')
  fi
  echo $ENVIRONMENT_ID
}

function __bamboo_choose_flowgraph_runner_realease_version() {
  if [ -z $BAMBOO_RELEASE_NAME ]; then
    RELEASE_NAME_ID=$(__bamboo_get_flowgraph_runner_releases \
    | jq -r '. | "\(.id) | \(.name)"' \
    | fzf \
    | awk -F ' \| ' '{print $1}')
  else 
    RELEASE_NAME_ID=$(__bamboo_get_flowgraph_runner_releases \
      | jq -r --arg BAMBOO_RELEASE_NAME "$BAMBOO_RELEASE_NAME" '. | select(.name==$BAMBOO_RELEASE_NAME) | .id')
  fi
  echo $RELEASE_NAME_ID
}

function __k8_tail_flink_reousrce() {
  APP=$(__get_k8_flink_app_labels_v2 $1)
  __variable_is_set $APP "You must pick a app"
  kubetail $KUBETAIL_OPTS -l app=$APP,component=$1
}

function __get_k8_flink_app_labels_v2() {
  TYPE=$1
  __variable_is_set $TYPE "Missing arg for __get_flink_app_labels"
  if [ -z $FLOWGRAPH ]; then
    __k8_get_flink_app_labels $TYPE | fzf
  else
    __k8_get_flink_app_labels $TYPE | grep $FLOWGRAPH
  fi
}


function __k8_port_forward_job_manager() {
  podName=$(__k8_get_pod_names jobmanager | fzf)
  xdg-open "http://localhost:8081" > /dev/null 2>&1
  kubectl port-forward $podName 8081
}

function __k8_port_forward_grafana() {
  xdg-open "http://localhost:3000" > /dev/null 2>&1
  kubectl port-forward $(kubectl get pods -l app=odp-dc-grafana  --output=name) 3000
}

function __k8_port_forward_prometheus() {
  xdg-open "http://localhost:9092" > /dev/null 2>&1
  kubectl port-forward $(kubectl get pods -l app=odp-dc-prometheus --output=name) 9092
}

function __k8_get_current_namespace() {
  kubectl config view \
    | grep current-context \
    | tr -s " " \
    | cut -f 2 -d " "
}

function __k8_get_pod_names() {
  cache="$CACHE_BASE_DIR/pod-names-$1"
  if [[ ! -s $cache ]]; then
    kubectl get pods -l component=$1 --output=name > $cache
  fi
  cat $cache
}

function __k8_get_flink_app_labels() {
  cache="$CACHE_BASE_DIR/app-labels-$1"
  if [[ ! -s $cache ]]; then
    kubectl get pods -l component=$1 -o jsonpath='{.items[*].metadata.labels}' \
      | jq -r .app \
      | grep flink \
      | uniq > $cache
  fi
  cat $cache
}

function __init_cache() {
  if [ "$FORCE" = "true" ]; then
    rm -r $CACHE_BASE_DIR
  fi
  if [ ! -d $CACHE_BASE_DIR ]; then
    mkdir $CACHE_BASE_DIR
  fi
}

function __empty_cache() {
  FILES="$CACHE_BASE_DIR/*"
  for i in $FILES
  do
    echo "Removing content in: $i"
    rm $i
  done
}

function __list_cache() {
  FILES="$CACHE_BASE_DIR/*"
  for i in $FILES
  do
    echo "File: $i"
    cat $i
  done
}

function __send_msg_to_kafka() {
  TOPIC=$(__get_kafka_topics | fzf)
  MSG=$1
  if [ -z $TOPIC ]; then
    echo "Missing topic!"
    exit 1
  fi
  if [ -z "$MSG" ]; then
    echo "Missing msg!"
    exit 1
  fi
  __interactive_yes_no_dialog "Send msg to '$TOPIC'?"
  kafka -t "$TOPIC" -PP -m "$MSG"
}

function __get_kafka_topics() {
  cache="$CACHE_BASE_DIR/kafka-topics"
  if [[ ! -s $cache ]]; then
    kafka -L > $cache
  fi
  cat $cache
}

function __interactive_yes_no_dialog() {
  if [ "$#" -ne 1 ]; then
    echo "Illegal number of parameters. Expected 2"
    exit 1
  fi

  QUESTION=$1
  echo -n "$QUESTION - (y/n): "
  read -r ANSWER

  if [ "$ANSWER" = "n" ]; then
    echo "Nothing to see here, bye bye"
    exit 1
  fi
}

function __interactive_input_dialog() {
  if [ "$#" -ne 1 ]; then
    echo "Illegal number of parameters. Expected 2"
    exit 1
  fi

  QUESTION=$1
  echo -n "$QUESTION: "
  read -r ANSWER

  if [ -z $ANSWER ]; then
    echo "Answer can't be empty"
    exit 1
  fi
}

function __variable_is_set() {
  if [ "$#" -ne 2 ]; then
    echo "Illegal number of parameters. Expected 2"
    exit 1
  fi
  if [ -z $1 ]; then
    echo "$2"
    exit 1
  fi
}

function __init_atlassian_config() {
  if [[ ! -s $ATLASSIAN_CONF_FILE ]]; then
    echo "ATLASSIAN_USERNAME=\"\"" >> $ATLASSIAN_CONF_FILE
    echo "ATLASSIAN_PASSWORD=\"\"" >> $ATLASSIAN_CONF_FILE
    echo "ATLASSIAN_JIRA_HOST=\"\"" >> $ATLASSIAN_CONF_FILE
    echo "ATLASSIAN_JIRA_BOARD_ID=\"1019\"" >> $ATLASSIAN_CONF_FILE
    echo "ATLASSIAN_BITBUCKET_HOST=\"\"" >> $ATLASSIAN_CONF_FILE
    echo "ATLASSIAN_BAMBOO_HOST=\"\"" >> $ATLASSIAN_CONF_FILE
    echo "ATLASSIAN_BAMBOO_AUTH_TOKEN=\"\"" >> $ATLASSIAN_CONF_FILE
    echo "ATLASSIAN_BAMBOO_RPOJECT_KEY=\"\"" >> $ATLASSIAN_CONF_FILE
    echo ""
    echo "Open $ATLASSIAN_CONF_FILE and add details!"
    exit 0
  else
    source $ATLASSIAN_CONF_FILE
  fi
}

function __get_jira_tickets_in_current_sprint() {
  cache="$CACHE_BASE_DIR/jira-$ATLASSIAN_JIRA_BOARD_ID"
  if [[ ! -s $cache ]]; then
    curl -su $ATLASSIAN_USERNAME:$ATLASSIAN_PASSWORD "$ATLASSIAN_JIRA_HOST/rest/greenhopper/1.0/xboard/work/allData.json?rapidViewId=$ATLASSIAN_JIRA_BOARD_ID" \
          | jq -r '.issuesData.issues[] | "\(.key) | \(.assignee) | \(.summary)"' > $cache
  fi

  cat $cache
}

function __jira_create_ticket() {
  templateFilePath="/tmp/dc/jira-template"
  template='{"fields":{"summary":"CHANGE ME","description":"CHANGE ME","project":{"key":"DP"},"customfield_10420":"Data Engineering","customfield_12638":"ODP","issuetype":{"name":"Story"},"labels":["DataCreation"]}}'
  echo $template > $templateFilePath
  vim $templateFilePath -c "%!jq ."

  res=$(curl \
    -u $ATLASSIAN_USERNAME:$ATLASSIAN_PASSWORD \
    -XPOST \
    -H "Content-Type: application/json" \
    --data-binary "@/tmp/dc/jira-template" \
    "$ATLASSIAN_JIRA_HOST/rest/api/2/issue")

  ticketId=$(echo $res | jq -r .key)
  echo "Browse: $ATLASSIAN_JIRA_HOST/browse/$ticketId"
}

function __jira_assign_ticket_to_you() {
  ticketId=$(__get_jira_tickets_in_current_sprint \
    | fzf \
    | awk -F ' \| ' '{print $1}')

  if [ -z $ticketId ]; then
    echo "Must pick a ticket!"
    exit 1
  fi

  curl \
    -u $ATLASSIAN_USERNAME:$ATLASSIAN_PASSWORD \
    -XPUT \
    -H "Content-Type: application/json" \
    --data '{"fields":{"assignee":{"name":"'$ATLASSIAN_USERNAME'"}}}' \
    "$ATLASSIAN_JIRA_HOST/rest/api/2/issue/$ticketId"
}

function __get_open_pull_requests() {
  cache="$CACHE_BASE_DIR/bitbucket-pull-requests"
  if [[ ! -s $cache ]]; then
    curl -su $ATLASSIAN_USERNAME:$ATLASSIAN_PASSWORD "$ATLASSIAN_BITBUCKET_HOST/rest/api/1.0/dashboard/pull-requests" \
      | jq -c '.values[] | select(.open == true) | {title: .title, author: .author.user.name, link: .links.self[].href, reviewers: .reviewers}' > $cache
  fi

  cat $cache
}

function __get_bamboo_plans() {
  cache="$CACHE_BASE_DIR/bamboo-plans"
  if [[ ! -s $cache ]]; then
    curl --silent -H "Authorization: Bearer $ATLASSIAN_BAMBOO_AUTH_TOKEN" "$ATLASSIAN_BAMBOO_HOST/rest/api/1.0/project/$ATLASSIAN_BAMBOO_RPOJECT_KEY.json?expand=plans" \
      | jq -r '.plans.plan[] | "\(.planKey.key) | \(.shortName)"' > $cache
  fi
  cat $cache
}

function __init() {
  __init_cache
  __init_atlassian_config
}

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    k8s-pf | k8s-port-forward)
    shift
    ARG=k8_port_forward
    ;;
    k8s-logs)
    shift
    ARG=k8_tail_logs
    ;;
    k8s-rm | k8s-remove)
    shift
    ARG=k8_remove_flowgraph
    ;;
    k8s-rm-all | k8s-remove-all)
    shift
    ARG=k8_remove_all_flowgraph_resources
    ;;
    k8s-scale | k8s-scale-deployment)
    shift
    ARG=k8_scale_deployment
    ;;
    cc | clean-cache)
    shift
    ARG=__empty_cache
    ;;
    lc | list-cache)
    shift
    ARG=__list_cache
    ;;
    kafka-send-load-complete-message)
    shift
    ARG=kafka_send_load_complete_command_msg
    ;;
    kafka-send-replay-message)
    shift
    ARG=kafka_send_replay_command_msg
    ;;
    flowgraph-create-savepoint)
    shift
    ARG=flowgraph_create_savepoint
    ;;
    flowgraph-get-savepoint-status)
    shift
    ARG=flowgraph_get_savepoint_status
    ;;
    jira-open-ticket)
    shift
    ARG=jira_list_tickets_in_current_sprint
    ;;
    jira-create-ticket)
    shift
    ARG=__jira_create_ticket
    ;;
    jira-assign-ticket)
    shift
    ARG=__jira_assign_ticket_to_you
    ;;
    bitbucket-open-pr)
    shift
    ARG=bitbucket_list_pull_requests
    ;;
    bamboo-open-plan)
    shift
    ARG=bamboo_open_plan
    ;;
    bamboo-open-plan-logs)
    shift
    # TODO
    ARG=bamboo_download_latest_build_logs
    ;;
    bamboo-build-fg | bamboo-build-fg)
    shift
    ARG=bamboo_run_flowgraph_runner
    ;;
    bamboo-release-fg | bamboo-release-fg)
    shift
    ARG=__bamboo_create_release
    ;;
    bamboo-deploy-fg | bamboo-deploy-fg)
    shift
    ARG=__bamboo_deploy_flowgraph
    ;;
    test)
    shift
    ARG=__bamboo_choose_flowgraph_runner_realease_version
    ;;
    jm | jobmanager)
    shift
    SERVICE="jm"
    ;;
    tm | taskmanager)
    shift
    SERVICE="tm"
    ;;
    grafana | grafana)
    shift
    SERVICE="grafana"
    ;;
    prometheus | prometheus)
    shift
    SERVICE="prometheus"
    ;;
    -f | --force)
    shift
    FORCE="true"
    ;;
    --flowgraph)
    shift
    FLOWGRAPH="$1"
    shift
    ;;
    --plan-key)
    shift
    BAMBOO_PLAN_KEY="$1"
    shift
    ;;
    --build-result-key)
    shift
    BAMBOO_DEPLOY_RESULT_KEY="$1"
    shift
    ;;
    --release-name)
    shift
    BAMBOO_RELEASE_NAME="$1"
    shift
    ;;
    --environment)
    shift
    ENVIRONMENT="$1"
    shift
    ;;
    --job-id)
    shift
    JOB_ID="$1"
    shift
    ;;
    --request-id)
    shift
    REQUEST_ID="$1"
    shift
    ;;
    -h | --help)
    shift
    usage
    ;;
esac
done

if [ -z "$ARG" ]; then
  usage
  exit 1
fi

__init
$ARG
